<!DOCTYPE html>
<html>
  <head>
  <title>{{title}}</title>
  <base href="http://10.25.11.45:8000">
  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">
  <link href="css/ripples.min.css" rel="stylesheet">
  <link href="css/material-wfont.min.css" rel="stylesheet">
  <link rel="stylesheet" href="css/style.css">
  </head>
  <body>
  <nav class="navbar navbar-default navbar-static-top">
    <div class="navbar-collapse collapse navbar-responsive-collapse">
    <ul class="nav navbar-nav">
      <li><a href="/">Home</a></li>
      <li><a href="/applications">Applications</a></li>
    </ul>
    </div>
  </nav>
  <main class="container-fluid">
    {{{body}}}
  </main>
  <script src="sdk/browser/annie.min.js"></script>
  <script src="//code.jquery.com/jquery-1.10.2.min.js"></script>
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

  <script src="js/ripples.min.js"></script>
  <script src="js/material.min.js"></script>
  <script>
    $(document).ready(function() {
      $.material.init();
    });
  </script>

  <script src="js/Chart.js"></script>
  <script>
    $(document).ready(function(){
      Chart.defaults.global.maintainAspectRatio = false;
      Chart.defaults.global.responsive = true;
      Chart.defaults.global.animation = false;

      var drawCharts = function(){
        $('.metric-flot:visible').each(function(i, e){
          var data = JSON.parse($(e).find('.metric-data').html());
          var metricType = $(e).data('metric-type');
          var options = {
            bezierCurve: false,
            datasetFill: false
          };

          var canvas = $(e).find('canvas');
          var width = canvas.parent().width();
          canvas.attr('width', width);
          var ctx = canvas.get(0).getContext('2d');
          switch (metricType) {
            case 'line':
              new Chart(ctx).Line({
                labels: data.labels,
                datasets: [
                  {
                    pointColor: '#4285f4',
                    data: data.data
                  }
                ]
              }, options);
              break;
            case 'bar':
              new Chart(ctx).Bar({
                labels: data.labels,
                datasets: [
                  {
                    pointColor: '#4285f4',
                    data: data.data
                  }
                ]
              }, options);
              break;
            case 'pie':
              // use circumference to compute %
              options.tooltipTemplate = '<%if (label){%><%=label%>: <%}%><%= circumference / (Math.PI * 2) * 100 %>%';
              var colors = [ '#5B90BF', '#96b5b4', '#a3be8c', '#ab7967', '#d08770', '#b48ead' ];
              data.forEach(function(datum, i){
                datum.color = colors[i % colors.length];
              });
              var pieChart = new Chart(ctx).Pie(data, options);
              // var img = $('<img>');
              // img.attr('src', pieChart.toBase64Image());
              // canvas.after(img);
              var legend = $(pieChart.generateLegend());
              $(e).find('.legend').append(legend);
              break;
          }
        });
      }
      drawCharts();
    });
  </script>
  </body>
</html>